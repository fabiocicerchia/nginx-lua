# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/docker@2.2.0

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - auto_update

  docker_builds: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - docker_build:
          matrix:
            parameters:
              class: ["large", "arm.medium"]
              distro: ["almalinux", "alpine", "amazonlinux", "debian", "fedora", "ubuntu"]
          filters:
            tags:
              ignore: /.*/
      - docker_bundle:
          requires:
            - docker_build
          matrix:
            parameters:
              distro: ["almalinux", "alpine", "amazonlinux", "debian", "fedora", "ubuntu"]
          filters:
            branches:
              only: main
      - metadata:
          requires:
            - docker_bundle
          filters:
            branches:
              only: main
      - auto_update:
          requires:
            - metadata
          filters:
            branches:
              only: main

jobs:
  docker_build:
    parameters:
      class:
        type: string
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: << parameters.class >>
    steps:
      - checkout

      - run:
          name: check docker
          command: |
            docker --version
            # seccomp
            # https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.14.0#faccessat2
            sudo apt-get install -y libseccomp2

      - run:
          name: Install Python Dependencies
          command: pip3 install -r bin/requirements.txt

      - run:
          name: Cleanup metadata artifacts
          command: rm -rf docs/metadata/* || true

      # - run:
      #     name: Enable Buildx
      #     command: |
      #       make qemu || true
      #       docker buildx inspect --bootstrap

      - run:
          name: Build docker image (classic)
          command: |
            make -j $(nproc) build-<< parameters.class >>-<< parameters.distro >>-classic
          environment:
            FORCE: "YES"

      - run:
          name: Build docker image (compat)
          command: |
            make -j $(nproc) build-<< parameters.class >>-<< parameters.distro >>-compat
          environment:
            FORCE: "YES"

      - run:
          name: Test images
          command: make -j $(nproc) test-<< parameters.distro >>
          environment:
            FORCE: "YES"

      - when:
          condition:
            and:
              - equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Log into registry
                command: |
                  docker login --username "${DOCKER_HUB_USER}" --password "${DOCKER_HUB_TOKEN}"
                environment:
                  DEBIAN_FRONTEND: noninteractive

      - when:
          condition:
            and:
              - equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Push images
                command: |
                  make -j $(nproc) push-<< parameters.distro >>
                environment:
                  FORCE: "YES"

      - persist_to_workspace:
          root: .
          paths:
            - docs/metadata

  docker_bundle:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    steps:
      - checkout

      - run:
          name: Install Python Dependencies
          command: pip3 install -r bin/requirements.txt

      - run:
          name: Log into registry
          command: |
            docker login --username "${DOCKER_HUB_USER}" --password "${DOCKER_HUB_TOKEN}"
          environment:
            DEBIAN_FRONTEND: noninteractive

      - run:
          name: Bundle manifest
          command: |
              make -j $(nproc) bundle-<< parameters.distro >>
          environment:
            FORCE: "YES"

  metadata:
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    steps:
      - checkout

      #- name: Push metadata
      #  run: make auto-commit-metadata
      #  if: github.ref == 'refs/heads/main'

  auto_update:
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    steps:
      - checkout

      - run:
          name: Install Python Dependencies
          command: pip3 install -r bin/requirements.txt

      - run:
          name: Install Skopeo
          command: |
            echo 'docker run quay.io/skopeo/stable:latest $@' | sudo tee /usr/local/bin/skopeo
            sudo chmod +x /usr/local/bin/skopeo

      - run:
          name: Generate Supported Versions
          command: |
              make auto-update-and-commit

      - run:
          name: Create Release
          command: make release
