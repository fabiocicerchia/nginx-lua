# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/docker
  node: circleci/docker@2.4.0

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - Release

  builds:
    jobs:
      - Docker AMD:
          name: Docker AMD << matrix.distro >>
          matrix:
            parameters:
              distro:
                [
                  "almalinux",
                  "alpine",
                  "amazonlinux",
                  "debian",
                  "fedora",
                  "ubuntu",
                ]
          filters:
            tags:
              ignore: /.*/
      - Docker ARM:
          name: Docker ARM << matrix.distro >>
          matrix:
            parameters:
              distro:
                [
                  "almalinux",
                  "alpine",
                  "amazonlinux",
                  "debian",
                  "fedora",
                  "ubuntu",
                ]
          filters:
            tags:
              ignore: /.*/
      - Package AMD:
          name: Package AMD << matrix.distro >>
          requires:
            - Docker AMD << matrix.distro >>
          matrix:
            parameters:
              distro:
                [
                  "almalinux",
                  "alpine",
                  "amazonlinux",
                  "debian",
                  "fedora",
                  "ubuntu",
                ]
          filters:
            tags:
              ignore: /.*/
      - Package ARM:
          name: Package ARM << matrix.distro >>
          requires:
            - Docker ARM << matrix.distro >>
          matrix:
            parameters:
              distro:
                [
                  "almalinux",
                  "alpine",
                  "amazonlinux",
                  "debian",
                  "fedora",
                  "ubuntu",
                ]
          filters:
            tags:
              ignore: /.*/
      - Docker Bundle:
          name: Docker Bundle << matrix.distro >>
          requires:
            - Package AMD << matrix.distro >>
            - Package ARM << matrix.distro >>
          matrix:
            parameters:
              distro:
                [
                  "almalinux",
                  "alpine",
                  "amazonlinux",
                  "debian",
                  "fedora",
                  "ubuntu",
                ]
          filters:
            branches:
              only: main
      - Metadata:
          requires:
            - Docker Bundle
          filters:
            branches:
              only: main
      - Release:
          requires:
            - Metadata
          filters:
            branches:
              only: main

commands:
  docker:
    parameters:
      distro:
        type: string
    steps:
      - checkout

      - restore_cache:
          keys:
            - mmdb-geoip2

      - run:
          name: check docker
          command: |
            docker --version
            # seccomp
            # https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.14.0#faccessat2
            sudo apt-get install -y libseccomp2

      - run:
          name: Install Python Dependencies
          command: pip3 install -r bin/requirements.txt

      - run:
          name: Install GeoIP2 MaxMindDB
          command: |
            mkdir -p test/geoip
            cd test/geoip
            if test ! -f "GeoLite2-City.mmdb"; then
              curl -Lu "$MAXMIND_ACCOUNT_ID:$MAXMIND_LICENSE_KEY" "https://download.maxmind.com/geoip/databases/GeoLite2-City/download?suffix=tar.gz" > GeoLite2-City.tar.gz
              curl -Lu "$MAXMIND_ACCOUNT_ID:$MAXMIND_LICENSE_KEY" "https://download.maxmind.com/geoip/databases/GeoLite2-Country/download?suffix=tar.gz" > GeoLite2-Country.tar.gz
              tar xvzf GeoLite2-City.tar.gz
              tar xvzf GeoLite2-Country.tar.gz
              mv GeoLite2-City_*/GeoLite2-City.mmdb ./
              mv GeoLite2-Country_*/GeoLite2-Country.mmdb ./
            fi

      - save_cache:
          key: mmdb-geoip2
          paths:
            - test/geoip/GeoLite2-City.mmdb
            - test/geoip/GeoLite2-Country.mmdb

      - run:
          name: Cleanup metadata artifacts
          command: rm -rf docs/metadata/* || true

      - run:
          name: Build docker image
          no_output_timeout: 60m
          command: |
            make -j $(nproc) build-$(dpkg --print-architecture)-<< parameters.distro >>
          environment:
            FORCE: "YES"

      - run:
          name: Test image
          command: make -j $(nproc) docker-test-$(dpkg --print-architecture)-<< parameters.distro >>
          environment:
            FORCE: "YES"

      # passing docker images to another job
      - run:
          name: Save image as tar
          command: |
            set -x
            mkdir -p images || true
            ARCH=$(dpkg --print-architecture)
            IMAGE_ID=$(docker images | grep nginx-lua | grep "<< parameters.distro >>-${ARCH}" | awk '{ print $3 }' | sort | head -n1)
            TAG=$(docker images | grep nginx-lua | grep "<< parameters.distro >>-${ARCH}" | awk '{ print $2 }' | sort | head -n1)
            TAGS=$(docker images | grep ${IMAGE_ID} | awk '{ print $2 }' | sort)
            echo "${TAGS}" > images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}.txt
            docker image save -o "images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}" "fabiocicerchia/nginx-lua:${TAG}"

      - when:
          condition:
            and:
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Log into registry
                command: |
                  docker login --username "${DOCKER_HUB_USER}" --password "${DOCKER_HUB_TOKEN}"
                environment:
                  DEBIAN_FRONTEND: noninteractive
            - run:
                name: Push images
                command: |
                  make -j $(nproc) push-<< parameters.distro >>
                environment:
                  FORCE: "YES"

      - persist_to_workspace:
          root: .
          paths:
            - images

  package:
    parameters:
      distro:
        type: string
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/previous-jobs

      - restore_cache:
          keys:
            - mmdb-geoip2

      - run:
          name: Load image
          command: |
            ARCH=$(dpkg --print-architecture)
            docker image load < "/tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}" > loading.txt
            cat loading.txt
            IMAGE_ID=$(cat loading.txt | grep "Loaded image:" | cut -d: -f3)
            echo $IMAGE_ID
            echo "export IMAGE_ID=$IMAGE_ID" >> $BASH_ENV
            cat /tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}.txt | while read TAG; do
              docker image tag fabiocicerchia/nginx-lua:$IMAGE_ID fabiocicerchia/nginx-lua:$TAG;
            done

            docker images

      - run:
          name: Build packages
          command: |
            make -j $(nproc) package-$(dpkg --print-architecture)-<< parameters.distro >>
            ls -lah dist/nginx-lua*.*

      - run:
          name: Test packages
          command: |
            ls -lah dist/nginx-lua*.*
            make -j $(nproc) package-test-$(dpkg --print-architecture)-<< parameters.distro >>

      - persist_to_workspace:
          root: .
          paths:
            - dist

jobs:
  Docker AMD:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: large
    steps:
      - docker:
          distro: << parameters.distro >>

  Docker ARM:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: arm.large
    steps:
      - docker:
          distro: << parameters.distro >>

  Package AMD:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: large
    steps:
      - package:
          distro: << parameters.distro >>

  Package ARM:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: arm.medium
    steps:
      - package:
          distro: << parameters.distro >>

  Docker Bundle:
    parameters:
      distro:
        type: string
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/previous-jobs

      - run:
          name: Load image
          command: |
            ARCH=amd64
            docker image load < "/tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}" > loading.txt
            IMAGE_ID=$(cat loading.txt | grep "Loaded image:" | cut -d: -f3)
            cat /tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}.txt | while read TAG; do
              docker image tag fabiocicerchia/nginx-lua:$IMAGE_ID fabiocicerchia/nginx-lua:$TAG;
            done

            ARCH=arm64
            docker image load < "/tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}" > loading.txt
            IMAGE_ID=$(cat loading.txt | grep "Loaded image:" | cut -d: -f3)
            cat /tmp/previous-jobs/images/${ARCH}-<< parameters.distro >>_${CIRCLE_SHA1}.txt | while read TAG; do
              docker image tag fabiocicerchia/nginx-lua:$IMAGE_ID fabiocicerchia/nginx-lua:$TAG;
            done

            echo "export IMAGE_ID=$IMAGE_ID" >> $BASH_ENV
            docker images

      - run:
          name: Install Python Dependencies
          command: pip3 install -vvv -r bin/requirements.txt

      - run:
          name: Log into registry
          command: |
            docker login --username "${DOCKER_HUB_USER}" --password "${DOCKER_HUB_TOKEN}"
          environment:
            DEBIAN_FRONTEND: noninteractive

      - run:
          name: Bundle manifest
          command: |
            make -j $(nproc) bundle-<< parameters.distro >>
          environment:
            FORCE: "YES"

  Metadata:
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    steps:
      - checkout

      - run:
          name: Push metadata
          command: make auto-commit-metadata

  Release:
    machine:
      # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/previous-jobs

      - run:
          name: Install Python Dependencies
          command: pip3 install -r bin/requirements.txt

      - run:
          name: Install Skopeo
          command: |
            echo 'docker run quay.io/skopeo/stable:latest $@' | sudo tee /usr/local/bin/skopeo
            sudo chmod +x /usr/local/bin/skopeo

      - run:
          name: Generate Supported Versions
          command: |
            git pull
            find /tmp/previous-jobs && cp -r /tmp/previous-jobs/dist ./dist || true
            make auto-update-and-commit

      - run:
          name: Create Release
          command: make release
