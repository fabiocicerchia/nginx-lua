diff --git a/src/stream/ngx_stream.h b/src/stream/ngx_stream.h
--- a/src/stream/ngx_stream.h
+++ b/src/stream/ngx_stream.h
@@ -254,6 +254,15 @@ typedef struct {
 } ngx_stream_module_t;


+typedef struct {
+    ngx_msec_t                       connect_timeout;
+    ngx_msec_t                       timeout;
+} ngx_stream_proxy_ctx_t;
+
+
+#define NGX_STREAM_HAVE_PROXY_TIMEOUT_FIELDS_PATCH 1
+
+
 #define NGX_STREAM_MODULE       0x4d525453     /* "STRM" */

 #define NGX_STREAM_MAIN_CONF    0x02000000
@@ -307,6 +316,7 @@ void ngx_stream_finalize_session(ngx_str
 extern ngx_module_t  ngx_stream_module;
 extern ngx_uint_t    ngx_stream_max_module;
 extern ngx_module_t  ngx_stream_core_module;
+extern ngx_module_t  ngx_stream_proxy_module;


 typedef ngx_int_t (*ngx_stream_filter_pt)(ngx_stream_session_t *s,
diff --git a/src/stream/ngx_stream_proxy_module.c b/src/stream/ngx_stream_proxy_module.c
--- a/src/stream/ngx_stream_proxy_module.c
+++ b/src/stream/ngx_stream_proxy_module.c
@@ -400,6 +400,7 @@ ngx_stream_proxy_handler(ngx_stream_sess
     ngx_stream_proxy_srv_conf_t      *pscf;
     ngx_stream_upstream_srv_conf_t   *uscf, **uscfp;
     ngx_stream_upstream_main_conf_t  *umcf;
+    ngx_stream_proxy_ctx_t           *pctx;

     c = s->connection;

@@ -410,6 +411,17 @@ ngx_stream_proxy_handler(ngx_stream_sess
     ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                    "proxy connection handler");

+    pctx = ngx_palloc(c->pool, sizeof(ngx_stream_proxy_ctx_t));
+    if (pctx == NULL) {
+        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
+        return;
+    }
+
+    pctx->connect_timeout = pscf->connect_timeout;
+    pctx->timeout = pscf->timeout;
+
+    ngx_stream_set_ctx(s, pctx, ngx_stream_proxy_module);
+
     u = ngx_pcalloc(c->pool, sizeof(ngx_stream_upstream_t));
     if (u == NULL) {
         ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
@@ -701,6 +713,7 @@ ngx_stream_proxy_connect(ngx_stream_sess
     ngx_connection_t             *c, *pc;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;

     c = s->connection;

@@ -708,6 +721,8 @@ ngx_stream_proxy_connect(ngx_stream_sess

     pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
+
     u = s->upstream;

     u->connected = 0;
@@ -771,7 +786,7 @@ ngx_stream_proxy_connect(ngx_stream_sess
     pc->read->handler = ngx_stream_proxy_connect_handler;
     pc->write->handler = ngx_stream_proxy_connect_handler;

-    ngx_add_timer(pc->write, pscf->connect_timeout);
+    ngx_add_timer(pc->write, ctx->connect_timeout);
 }


@@ -946,8 +961,10 @@ ngx_stream_proxy_send_proxy_protocol(ngx
     ssize_t                       n, size;
     ngx_connection_t             *c, *pc;
     ngx_stream_upstream_t        *u;
-    ngx_stream_proxy_srv_conf_t  *pscf;
     u_char                        buf[NGX_PROXY_PROTOCOL_V1_MAX_HEADER];
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);

     c = s->connection;

@@ -975,9 +992,7 @@ ngx_stream_proxy_send_proxy_protocol(ngx
             return NGX_ERROR;
         }

-        pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);
-
-        ngx_add_timer(pc->write, pscf->timeout);
+        ngx_add_timer(pc->write, ctx->timeout);

         pc->write->handler = ngx_stream_proxy_connect_handler;

@@ -1052,6 +1067,9 @@ ngx_stream_proxy_ssl_init_connection(ngx
     ngx_connection_t             *pc;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);

     u = s->upstream;

@@ -1100,7 +1118,7 @@ ngx_stream_proxy_ssl_init_connection(ngx
     if (rc == NGX_AGAIN) {

         if (!pc->write->timer_set) {
-            ngx_add_timer(pc->write, pscf->connect_timeout);
+            ngx_add_timer(pc->write, ctx->connect_timeout);
         }

         pc->ssl->handler = ngx_stream_proxy_ssl_handshake;
@@ -1409,6 +1427,7 @@ ngx_stream_proxy_process_connection(ngx_
     ngx_stream_session_t         *s;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;

     c = ev->data;
     s = c->data;
@@ -1420,6 +1439,8 @@ ngx_stream_proxy_process_connection(ngx_
         return;
     }

+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);
+
     c = s->connection;
     pc = u->peer.connection;

@@ -1439,7 +1460,7 @@ ngx_stream_proxy_process_connection(ngx_
                 }

                 if (u->connected && !c->read->delayed && !pc->read->delayed) {
-                    ngx_add_timer(c->write, pscf->timeout);
+                    ngx_add_timer(c->write, ctx->timeout);
                 }

                 return;
@@ -1601,6 +1622,9 @@ ngx_stream_proxy_process(ngx_stream_sess
     ngx_log_handler_pt            handler;
     ngx_stream_upstream_t        *u;
     ngx_stream_proxy_srv_conf_t  *pscf;
+    ngx_stream_proxy_ctx_t       *ctx;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_proxy_module);

     u = s->upstream;

@@ -1792,7 +1816,7 @@ ngx_stream_proxy_process(ngx_stream_sess
         }

         if (!c->read->delayed && !pc->read->delayed) {
-            ngx_add_timer(c->write, pscf->timeout);
+            ngx_add_timer(c->write, ctx->timeout);

         } else if (c->write->timer_set) {
             ngx_del_timer(c->write);
