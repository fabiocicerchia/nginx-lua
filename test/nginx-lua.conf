worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    upstream foo.com {
        server 127.0.0.1:80;
        server 127.0.0.1:80 backup;
    }

    # REF: https://github.com/openresty/lua-resty-upstream-healthcheck
    lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;

    # REF: https://github.com/knyar/nginx-lua-prometheus
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/path/to/nginx-lua-prometheus/?.lua;;";
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }
    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})

        local hc = require "resty.upstream.healthcheck"
        local ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "foo.com",
            type = "http",
            http_req = "GET /status HTTP/1.0\r\nHost: foo.com\r\n\r\n",
            interval = 2000,
            timeout = 1000,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    # TODO: is it needed?
    lua_package_cpath '/usr/local/lib/lua/5.4/?.so;;';
    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location = /lua_content {
            default_type 'text/plain';
            content_by_lua_block {
                ngx.say('Hello world!')
            }
        }

        location = /status {
            access_log off;
            allow 127.0.0.1;
            deny all;
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }

        # REF: https://github.com/openresty/lua-resty-websocket
        location = /socket {
            content_by_lua_block {
                local server = require "resty.websocket.server"
                local wb, err = server:new{
                    timeout = 5000,
                    max_payload_len = 65535,
                }
                if not wb then
                    ngx.log(ngx.ERR, "failed to new websocket: ", err)
                    return ngx.exit(444)
                end
                local data, typ, err = wb:recv_frame()
                if not data then
                    if not string.find(err, "timeout", 1, true) then
                        ngx.log(ngx.ERR, "failed to receive a frame: ", err)
                        return ngx.exit(444)
                    end
                end
                if typ == "close" then
                    local code = err
                    local bytes, err = wb:send_close(1000, "enough, enough!")
                    if not bytes then
                        ngx.log(ngx.ERR, "failed to send the close frame: ", err)
                        return
                    end
                    ngx.log(ngx.INFO, "closing with status code ", code, " and message ", data)
                    return
                end
                if typ == "ping" then
                    local bytes, err = wb:send_pong(data)
                    if not bytes then
                        ngx.log(ngx.ERR, "failed to send frame: ", err)
                        return
                    end
                elseif typ == "pong" then
                else
                    ngx.log(ngx.INFO, "received a frame of type ", typ, " and payload ", data)
                end
                wb:set_timeout(1000)
                bytes, err = wb:send_text("Hello world")
                if not bytes then
                    ngx.log(ngx.ERR, "failed to send a text frame: ", err)
                    return ngx.exit(444)
                end
                bytes, err = wb:send_binary("blah blah blah...")
                if not bytes then
                    ngx.log(ngx.ERR, "failed to send a binary frame: ", err)
                    return ngx.exit(444)
                end
                local bytes, err = wb:send_close(1000, "enough, enough!")
                if not bytes then
                    ngx.log(ngx.ERR, "failed to send the close frame: ", err)
                    return
                end
            }
        }

        # REF: https://github.com/openresty/lua-resty-shell
        location = /shell {
            content_by_lua_block {
                local shell = require "resty.shell"
                local stdin = "hello"
                local timeout = 1000
                local max_size = 4096
                local ok, stdout, stderr, reason, status =
                shell.run([[sh -c 'echo $0']], stdin, timeout, max_size)
                if not ok then
                    ngx.say('not ok')
                else
                    ngx.say('ok')
                end
            }
        }

        # REF: https://github.com/openresty/lua-resty-dns
        location = /dns {
            content_by_lua_block {
                local resolver = require "resty.dns.resolver"
                local r, err = resolver:new{
                    nameservers = {"8.8.8.8", {"8.8.4.4", 53} },
                    retrans = 5,
                    timeout = 2000,
                }
                if not r then
                    ngx.say("failed to instantiate the resolver: ", err)
                    return
                end
                local answers, err, tries = r:query("www.google.com", nil, {})
                if not answers then
                    ngx.say("failed to query the DNS server: ", err)
                    ngx.say("retry historie:\n  ", table.concat(tries, "\n  "))
                    return
                end
                if answers.errcode then
                    ngx.say("server returned error code: ", answers.errcode,
                            ": ", answers.errstr)
                end
                for i, ans in ipairs(answers) do
                    ngx.say(ans.name, " ", ans.address or ans.cname,
                            " type:", ans.type, " class:", ans.class,
                            " ttl:", ans.ttl)
                end
            }
        }

        # REF: https://github.com/cloudflare/lua-resty-cookie
        location = /cookie {
            content_by_lua '
                local ck = require "resty.cookie"
                local cookie, err = ck:new()
                if not cookie then
                    ngx.log(ngx.ERR, err)
                    return
                end
                local field, err = cookie:get("lang")
                if not field then
                    ngx.log(ngx.ERR, err)
                    return
                end
                -- ngx.say("lang", " => ", field)
                local fields, err = cookie:get_all()
                if not fields then
                    ngx.log(ngx.ERR, err)
                    return
                end
                for k, v in pairs(fields) do
                    -- ngx.say(k, " => ", v)
                end
                local ok, err = cookie:set({
                    key = "Name", value = "Bob", path = "/",
                    domain = "example.com", secure = true, httponly = true,
                    expires = "Wed, 09 Jun 2021 10:18:14 GMT", max_age = 50,
                    samesite = "Strict", extension = "a4334aebaec"
                })
                if not ok then
                    ngx.log(ngx.ERR, err)
                    return
                end
                local ok, err = cookie:set({
                    key = "Age", value = "20",
                })
                if not ok then
                    ngx.log(ngx.ERR, err)
                    return
                end
            ';
        }

        # REF: https://github.com/openresty/headers-more-nginx-module
        more_set_headers 'Server: my-server';
        location = /bar {
            more_set_headers 'X-MyHeader: blah' 'X-MyHeader2: foo';
            more_set_headers -t 'text/plain text/css' 'Content-Type: text/foo';
            more_set_headers -s '400 404 500 503' -s 413 'Foo: Bar';
            more_clear_headers 'Content-Type';
            return 200 "OK";
        }
        location = /type {
            more_set_headers 'Content-Type: text/plain';
            return 200 "OK";
        }
        more_set_input_headers -r 'X-Foo: howdy';

        # REF: https://github.com/openresty/lua-cjson
        location = /cjson {
            content_by_lua '
                local cjson = require "cjson"
                ngx.say("read: ", cjson.encode({0, 1}))
            ';
        }
    }

    # TODO: Add https://github.com/openresty/lua-resty-lrucache
    # TODO: Add https://github.com/openresty/lua-resty-memcached
    # TODO: Add https://github.com/openresty/lua-resty-mysql
    # TODO: Add https://github.com/openresty/lua-resty-redis
}

# REF: https://github.com/openresty/stream-lua-nginx-module
stream {
    server {
        listen 1234;
        content_by_lua_block {
            ngx.say("Hello, Lua!")
        }
    }
}
