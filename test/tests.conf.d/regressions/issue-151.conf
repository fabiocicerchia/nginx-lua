# Nginx configuration taken from https://github.com/fabiocicerchia/nginx-lua/issues/151
events {}

http {
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/etc/nginx/prometheus/prometheus.lua;;";

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")

        metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})

        metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"host", "method", "status"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency", {"host", "method"}, {0.0005, 0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 30})
        metric_bytes_sent = prometheus:histogram("nginx_http_request_bytes_sent_total", "HTTP request bytes sent to client", {"host", "method"}, {100,512,1024,4096,16384,65536,524288,1048576,10485760})
        metric_bytes_rcvd = prometheus:histogram("nginx_http_request_bytes_received_total", "HTTP request bytes received from client", {"host", "method"}, {100,512,1024,4096,16384,65536,524288,1048576,10485760})
    }

    log_by_lua_block {
        if ngx.var.uri ~= "/metrics" then
            local host = ngx.var.host
            local status = ngx.var.status
            local method = ngx.var.request_method

            metric_requests:inc(1, {host, method, status})
            metric_latency:observe(tonumber(ngx.var.request_time), {host, method})
            metric_bytes_rcvd:observe(tonumber(ngx.var.request_length), {host, method})
            metric_bytes_sent:observe(tonumber(ngx.var.body_bytes_sent), {host, method})
        end
    }

    server {
        listen       80;
        server_name  localhost;

        error_log /var/log/nginx/error.log warn;

        location /metrics {
            # if ($ssl_client_verify != SUCCESS) {
            #     return 403 "";
            # }
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}